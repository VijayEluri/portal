import groovy.sql.Sql
import org.apache.tools.ant.filters.*

bundlePath = "$buildDir/bundle/"
bundleTmpPath = "$bundlePath/tmp/"
warTmpPath = "$bundleTmpPath/war/"
sqlTmpPath = "$bundleTmpPath/sql/"

dependencies {
  compile project(':portal-webapp')
}

task dist << {
  println "task bundle dist"
  cleanBundle()
  sqlPreparation()
  bundleWar()
  bundleTomcat()
  cleanTmpFolder()
}

def bundleWar() {
  def bundleWarPath = "$bundlePath/devproof-portal-${version}-war"
  mkdir(bundleWarPath)
  copyReadmeAndChanges(bundleWarPath, 'TOMCAT6')
  copyLicences(bundleWarPath)
  copyWar(bundleWarPath)
  copyConfigFiles(bundleWarPath)
  concatCreateSqlAndWriteFile('hsql', bundleWarPath)
  concatCreateSqlAndWriteFile('mysql', bundleWarPath)
  concatCreateSqlAndWriteFile('oracle', bundleWarPath)
  tarGz(bundleWarPath)
}

def bundleTomcat() {
  def bundleTomcatPath = "$bundlePath/devproof-portal-${version}-with-tomcat6"
  mkdir(bundleTomcatPath)
  copyReadmeAndChanges(bundleTomcatPath, 'WAR')
  copyLicences(bundleTomcatPath)
  copyWar(bundleTomcatPath)
  copyConfigFiles(bundleTomcatPath)
  concatCreateSqlAndWriteFile('hsql', bundleTomcatPath)
  concatCreateSqlAndWriteFile('mysql', bundleTomcatPath)
  concatCreateSqlAndWriteFile('oracle', bundleTomcatPath)
  def tomcatPath = downloadTomcatAndExtract(bundleTomcatPath)
  deleteDir("$tomcatPath/webapps")
  mkdir("$tomcatPath/webapps")
  copyLibsForTomcat(tomcatPath)
  copyConfigForTomcat(tomcatPath)
  createHsqlDBFiles(bundleTomcatPath)
  tarGz(bundleTomcatPath)
}

def tarGz(bundlePath) {
  ant.tar(
      destfile: bundlePath + '.tar',
      basedir: bundlePath
  )
  def bundlePathTarGz = bundlePath + '.tar.gz'
  ant.gzip(
      destfile: bundlePathTarGz,
      src: bundlePath + '.tar'
  )
  delete(bundlePath + '.tar')
  println "Devproof bundled distribution: $bundlePathTarGz"
}

def copyConfigForTomcat(tomcatPath) {
  copy {
    from ('config/tomcat6/hsql/ROOT.xml') {
      filter(ReplaceTokens, tokens: [devproofVersion: project.version])
    }
    into "$tomcatPath/conf/Catalina/localhost/"
  }
}

def copyLibsForTomcat(tomcatPath) {
  copy {
    from 'server/tomcat6/lib/'
    into "$tomcatPath/lib/"
  }
}

def downloadTomcatAndExtract(bundlePath) {
  // url is in root build.gradle
  def downloadedFile = download(bundlePath, tomcatUrl)
  def tarFile = downloadedFile[0..-4]
  def folder = downloadedFile[0..-8]
  ant.gunzip(
    src: downloadedFile,
    dest: tarFile
  )

  ant.untar(
    src: tarFile,
    dest: bundlePath
  )
  delete(downloadedFile)
  delete(tarFile)
  folder  // removes .tar.gz
}

def copyWar(bundlePath) {
  println "copyWar"
  copy {
    from locateWarPath()
    into bundlePath + "/war/"
    rename { String fileName ->
        "devproof-portal-${version}.war"
    }
  }
}

def copyConfigFiles(bundlePath) {
  println "copyConfig"
  copy {
    from 'config'
    into "$bundlePath/config"
  }
}

def copyReadmeAndChanges(bundlePath, readmePostfix) {
  println "copyReadmeAndChanges"
  copy {
    from "README_$readmePostfix"
    into bundlePath
    rename { String fileName ->
        "README"
    }
  }
  copy {
    from "CHANGES"
    into bundlePath
  }
}

def copyLicences(bundlePath) {
  println "copyLicences"
  copy {
    from '/licenses/'
    into bundlePath + '/licenses/'
  }
}

def sqlPreparation() {
  extractWar()
  extractSql()
}

def createHsqlDBFiles(bundlePath) {
  def bundleTomcatHsqlPath = "$bundlePath/data/"
  mkdir(bundleTomcatHsqlPath)
  def source = new org.hsqldb.jdbc.jdbcDataSource()
  source.database = "jdbc:hsqldb:file:$bundleTomcatHsqlPath/devproof_data"
  source.user = 'sa'
  source.password = ''
  def sql = new Sql(source)
  def creationScript = file("$bundlePath/sql/install_devproof_hsql.sql").text
  sql.execute(creationScript);
  sql.close()
}

def cleanBundle() {
  println "cleanBundle"
  deleteDir(bundlePath)
}

def deleteDir(dir) {
  println "cleanBundle"
  file(dir).deleteDir()
}

def cleanTmpFolder() {
  println "clean tmp"
  file(bundlePath + '/tmp/').deleteDir()
}

def locateWarPath() {
  def p = project(':portal-webapp')
  p.buildDir.path + '/libs/' + p.name + '-' + version + '.war'
}

def extractWar() {
  println "extractWar"
  copy {
    from zipTree(locateWarPath())
    into warTmpPath
  }
}

def extractSql() {
  println "extractSql"
  copy {
    jars = "$warTmpPath/WEB-INF/lib/"
    fileTree(jars).each{
      jarFile ->
      include 'sql/*/*.sql'
      from zipTree(jarFile)
      into bundleTmpPath
    }
  }
}

def concatCreateSqlAndWriteFile(type, bundlePath) {
  println "concatSql $type"
  def sqlPath = "$bundlePath/sql/"
  mkdir(sqlPath)
  File outputFile = file(sqlPath + '/install_devproof_' + type + '.sql')
  outputFile.append(file(sqlTmpPath + '/create/create_tables_' + type + '_core.sql').text + '\n');
  outputFile.append(file(sqlTmpPath + '/create/insert_core.sql').text + '\n');
  def sqlFiles = file(sqlTmpPath + '/create').listFiles().sort()
  // create* files
  sqlFiles.each { File file ->
    def createCore = 'create_tables_' + type + '_core.sql'
    if(file.name.startsWith("create_tables_$type") &&
      file.name != createCore) {
      outputFile.append(file.text + '\n');
    }
  }
  // insert* files
  sqlFiles.each { File file ->
    def insertCore = 'insert_core.sql'
    if(file.name.startsWith('insert_') &&
      file.name != insertCore) {
      outputFile.append(file.text + '\n');
    }
  }
}

def download(folder, address) {
  println "Downloading... $address"
  def filename = address.tokenize("/")[-1]
  def localFilePath = folder + '/' + filename
  def file = new FileOutputStream(localFilePath)
  def out = new BufferedOutputStream(file)
  out << new URL(address).openStream()
  out.close()
  localFilePath
}

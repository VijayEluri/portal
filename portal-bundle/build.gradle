import groovy.sql.Sql

bundlePath = "$buildDir/bundle/"
bundleTmpPath = "$bundlePath/tmp/"
warTmpPath = "$bundleTmpPath/war/"
sqlTmpPath = "$bundleTmpPath/sql/"

dependencies {
  compile project(':portal-webapp')
}

task bundle() {
  println "task bundle"
  cleanBundle()
  sqlPreparation()
  bundleWar()
  bundleTomcat()
  cleanTmpFolder()
}

def bundleWar() {
  def bundleWarPath = "$bundlePath/devproof-portal-${version}-war"
  mkdir(bundleWarPath)
  copyLicences(bundleWarPath)
  copyWar(bundleWarPath)
  concatCreateSqlAndWriteFile('hsql', bundleWarPath)
  concatCreateSqlAndWriteFile('mysql', bundleWarPath)
  concatCreateSqlAndWriteFile('oracle', bundleWarPath)
}

def bundleTomcat() {
  def bundleTomcatPath = "$bundlePath/devproof-portal-${version}-with-tomcat6"
  mkdir(bundleTomcatPath)
  copyLicences(bundleTomcatPath)
  copyWar(bundleTomcatPath)
  concatCreateSqlAndWriteFile('hsql', bundleTomcatPath)
  concatCreateSqlAndWriteFile('mysql', bundleTomcatPath)
  concatCreateSqlAndWriteFile('oracle', bundleTomcatPath)
  createHsqlDBFiles(bundleTomcatPath)
}

def copyWar(bundlePath) {
  println "copyWar"
  copy {
    from locateWarPath()
    into bundlePath + '/war/'
  }
}

def copyLicences(bundlePath) {
  println "copyLicences"
  copy {
    from '/licenses/'
    into bundlePath + '/licenses/'
  }
}

def sqlPreparation() {
  extractWar()
  extractSql()
}

def createHsqlDBFiles(bundlePath) {
  def bundleTomcatHsqlPath = "$bundlePath/hsql/"
  mkdir(bundleTomcatHsqlPath)
  def source = new org.hsqldb.jdbc.jdbcDataSource()
  source.database = "jdbc:hsqldb:file:$bundleTomcatHsqlPath/devproof_data"
  source.user = 'sa'
  source.password = ''
  def sql = new Sql(source)
  def creationScript = file("$bundlePath/sql/install_devproof_hsql.sql").text
  sql.execute(creationScript);
  sql.close()
}

def cleanBundle() {
  println "cleanBundle"
  file(bundlePath).deleteDir()
}

def cleanTmpFolder() {
  println "clean tmp"
  file(bundlePath + '/tmp/').deleteDir()
}

def locateWarPath() {
  def p = project(':portal-webapp')
  p.buildDir.path + '/libs/' + p.name + '-' + version + '.war'
}

def extractWar() {
  println "extractWar"
  copy {
    from zipTree(locateWarPath())
    into warTmpPath
  }
}

def extractSql() {
  println "extractSql"
  copy {
    jars = "$warTmpPath/WEB-INF/lib/"
    fileTree(jars).each{
      jarFile ->
      include 'sql/*/*.sql'
      from zipTree(jarFile)
      into bundleTmpPath
    }
  }
}

def concatCreateSqlAndWriteFile(type, bundlePath) {
  println "concatSql $type"
  def sqlPath = "$bundlePath/sql/"
  mkdir(sqlPath)
  File outputFile = file(sqlPath + '/install_devproof_' + type + '.sql')
  outputFile.append(file(sqlTmpPath + '/create/create_tables_' + type + '_core.sql').text + '\n');
  outputFile.append(file(sqlTmpPath + '/create/insert_core.sql').text + '\n');
  def sqlFiles = file(sqlTmpPath + '/create').listFiles().sort()
  // create* files
  sqlFiles.each { File file ->
    def createCore = 'create_tables_' + type + '_core.sql'
    if(file.name.startsWith("create_tables_$type") &&
      file.name != createCore) {
      outputFile.append(file.text + '\n');
    }
  }
  // insert* files
  sqlFiles.each { File file ->
    def insertCore = 'insert_core.sql'
    if(file.name.startsWith('insert_') &&
      file.name != insertCore) {
      outputFile.append(file.text + '\n');
    }
  }
}

//task hello(type: Copy) {
//  download('http://www.eu.apache.org/dist/tomcat/tomcat-6/v6.0.29/bin/apache-tomcat-6.0.29.tar.gz')
//}

def download(address) {
    def file = new FileOutputStream("$buildDirName/" + address.tokenize("/")[-1])
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}
